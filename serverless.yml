service: apitemplate

custom:
    environments:
        local: local
        dev: Dev
        test: Test
        stg: Stage
        prod: Prod
    serverless-offline:
        port: 3000
    serverless-offline-sns:
        port: 4002
        debug: false
    s3:
        port: 8000
        directory: "temp/"
    contentEncoding:
        minimumCompressionSize: 1
    apigwBinary:
        types:
            - "image/jpeg"
            - "image/bmp"
            - "image/png"
            - "image/gif"
            - "image/svg+xml"
            - "image/tiff"
    domains:
        stage: ${self:provider.stage}-${self:service}.pricelocq.com
        apienv:
            dev: alpha-api
            test: beta-api
            stg: stable-api
            prod: api
    customDomain:
        domainName: ${self:custom.domains.apienv.${self:provider.stage}}.pricelocq.com
        stage: ${self:provider.stage}
        basePath: ${self:service}
        certificateName: "pricelocq.com"
        createRoute53Record: false
        endpointType: edge
        enabled: false
        
provider:
    name: aws
    runtime: nodejs12.x
    #profile: default
    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'ap-southeast-1'}
    endpointType: edge
    versionFunctions: false
    tracing:
        apiGateway: true
        lambda: true
    environment:
        NODE_ENV: ${self:provider.stage}
        DOMAIN_BASEPATH: ${self:custom.customDomain.basePath}
        APP_NAME: ${self:service}
        APP_HOST_SSL: false
        APP_TIMEZONE: "Asia/Manila"
        ACCESSKEY: ""
        SECRETKEY: ""
        DB_DRIVER: mysql
        DB_NAME: ""
        DB_USERNAME: ""
        DB_PASSWORD: ""
        DB_HOST: ""
        DB_PORT: 3306
        DB_SSL: true
    deploymentBucket:
        name: deploy.${self:provider.region}.pricelocq.com #Change this to actual bucket used
    iamRoleStatements:
        -   Effect: Allow
            Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:CreateNetworkInterface
                - ec2:DeleteNetworkInterface
                - ec2:DescribeNetworkInterfaces
            Resource: "*"
        -   Effect: Allow
            Action:
                - elasticache:*
            Resource: "*"
        -   Effect: Allow
            Action:
                - s3:*
            Resource: "*"
        -   Effect: Allow
            Action:
                - sns:*
            Resource: "*"
        -   Effect: Allow
            Action:
                - ses:*
            Resource: "*"
        -   Effect: Allow
            Action:
                - sqs:*
            Resource: "*"
        -   Effect: Allow
            Action:
                - dynamodb:*
            Resource: "*"
        -   Effect: Allow
            Action:
                - acm:ListCertificates
            Resource: "*"
        -   Effect: Allow
            Action:
                - xray:*
            Resource: "*"
        -   Effect: Allow
            Action:
                - apigateway:*
            Resource: "*"
        -   Effect: Allow
            Action:
                - lambda:InvokeFunction
            Resource: "*"
    #vpc:
        #securityGroupIds:
            #- sg-008cd06fd3fdbb83d
        #subnetIds:
            #- subnet-43d4860a
            #- subnet-f9a545a0

functions:
    app:
        handler: index.handler
        name: ${self:service}-${opt:stage, self:provider.stage}-function # optional, Deployed Lambda name
        description: 'API Lambda Function'
        memorySize: 512
        timeout: 30
        provisionedConcurrency: 1
        reservedConcurrency: 1
        events:
            -   http: ANY /
            -   http: 'ANY {proxy+}'
                cors:
                    origin: '*'
                    maxAge: 86400
                    headers:
                        - Content-Type
                        - X-Amz-Date
                        - Authorization
                        - X-Api-Key
                        - X-Amz-Security-Token
                        - X-Amz-User-Agent
                    allowCredentials: false
                    cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'
            -   schedule:
                    name: ${self:service}-${opt:stage, self:provider.stage}-cron-warmup
                    description: "schedule events for keeping the lambda active"
                    rate: 'rate(3 minutes)'
                    enabled: true

    #sqsWorker:
    #    handler: api/workers/sample.sample
    #    name: ${self:service}-${opt:stage, self:provider.stage}-sqsworker-function # optional, Deployed Lambda name
    #    description: 'SQS Workers'
    #    memorySize: 256
    #    timeout: 60
    #    provisionedConcurrency: 1
    #    reservedConcurrency: 1
    #    events:
    #        -   sqs:
    #                arn: arn:aws:sqs:ap-southeast-1:788518120393:sqsworker.fifo
    #                batchSize: 10

    #crawl:
        #handler: api/schedule/sample.sample #Format file.function
        #name: ${self:service}-${opt:stage, self:provider.stage}-cron-function # optional, Deployed Lambda name
        #description: 'Schedule Events'
        #memorySize: 256
        #timeout: 60
        #reservedConcurrency: 1
        #events:
            #-   schedule:
                    #name: ${self:service}-${opt:stage, self:provider.stage}-cron-RetrievingData
                    #description: 'Schedule Events for Retrieving data'
                    #rate: 'rate(1 minute)'
                    #enabled: false

package:
    exclude:
        - .github/**
        - temp/**
    include:
        - .env
        - node_modules/**

plugins:
  - serverless-s3-local
  - serverless-offline
  - serverless-offline-scheduler
  - serverless-offline-sns
  - serverless-apigw-binary
  - serverless-content-encoding
  - serverless-domain-manager
  - serverless-pseudo-parameters
